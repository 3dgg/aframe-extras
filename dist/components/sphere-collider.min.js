!function e(t,i,r){function n(s,l){if(!i[s]){if(!t[s]){var c="function"==typeof require&&require;if(!l&&c)return c(s,!0);if(o)return o(s,!0);var a=new Error("Cannot find module '"+s+"'");throw a.code="MODULE_NOT_FOUND",a}var u=i[s]={exports:{}};t[s][0].call(u.exports,function(e){var i=t[s][1][e];return n(i||e)},u,u.exports,e,t,i,r)}return i[s].exports}for(var o="function"==typeof require&&require,s=0;s<r.length;s++)n(r[s]);return n}({1:[function(e,t,i){AFRAME.registerComponent("sphere-collider",e("./src/misc/sphere-collider"))},{"./src/misc/sphere-collider":2}],2:[function(e,t,i){t.exports={schema:{objects:{default:""},state:{default:"collided"},radius:{default:.05},watch:{default:!0}},init:function(){this.observer=null,this.els=[],this.collisions=[],this.handleHit=this.handleHit.bind(this)},remove:function(){this.pause()},play:function(){var e=this.el.sceneEl;this.data.watch&&(this.observer=new MutationObserver(this.update.bind(this,null)),this.observer.observe(e,{childList:!0,subtree:!0}))},pause:function(){this.observer&&(this.observer.disconnect(),this.observer=null)},update:function(){var e,t=this.data;e=t.objects?this.el.sceneEl.querySelectorAll(t.objects):this.el.sceneEl.children,this.els=Array.prototype.slice.call(e)},tick:function(){var e=new THREE.Vector3,t=new THREE.Vector3,i=new THREE.Vector3,r=new THREE.Vector3,n=new Map;return function(){function o(r){var o,c,a,u;r.isEntity&&(c=r.getObject3D("mesh"))&&c.geometry&&(c.getWorldPosition(t),c.geometry.computeBoundingSphere(),o=c.geometry.boundingSphere.radius,a=e.distanceTo(t),u=s(c.getWorldScale(i)),a<o*u+l&&(h.push(r),n.set(r,a)))}function s(e){return Math.max.apply(null,e.toArray())}var l,c=this.el,a=this.data,u=c.getObject3D("mesh"),h=[];u&&(n.clear(),e.copy(c.object3D.getWorldPosition()),c.object3D.getWorldScale(r),l=a.radius*s(r),this.els.forEach(o),h.sort(function(e,t){return n.get(e)>n.get(t)?1:-1}).forEach(this.handleHit),0===h.length&&c.emit("hit",{el:null}),this.collisions.filter(function(e){return!n.has(e)}).forEach(function(e){e.removeState(a.state)}),this.collisions=h)}}(),handleHit:function(e){e.emit("hit"),e.addState(this.data.state),this.el.emit("hit",{el:e})}}},{}]},{},[1]);